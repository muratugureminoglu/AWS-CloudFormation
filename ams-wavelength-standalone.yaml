AWSTemplateFormatVersion: 2010-09-09
Description: >-
  This template automatically installs Ant Media with SSL support on Wavelength Zone. Your domain must be on Route53.
  Subnets:
    Type: 'List<AWS::EC2::Subnet::Id>'
    Description: 'You must choose at least 2 subnets from the same VPC network.'
    ConstraintDescription: >-
      must be a list of at least two existing subnets associated with at least
      two different availability zones. They should be residing in the selected
      Virtual Private Cloud.
  VpcId:
    Type: 'AWS::EC2::VPC::Id'
    Description: 'VpcId of your existing Virtual Private Cloud (VPC). The VpcId must be the same as the subnets you choose'
    ConstraintDescription: 'must be the VPC Id of an existing Virtual Private Cloud. The VpcId must be the same as the subnets you choose.'
  AntMediaServerInstanceType:
    Description: Ant Media Server EC2 instance type
    Type: String
    Default: t3.medium
    AllowedValues:
      - t3.medium
      - t3.xlarge
      - r5.2xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances. If there is no value here, you must create an ssh key (EC2 > Key Pairs).
    Type: 'AWS::EC2::KeyPair::KeyName'
    MinLength: '1'
    MaxLength: '255'
    AllowedPattern: '[\x20-\x7E]*'
    ConstraintDescription: can contain only ASCII characters.
  STUNServerAddress:
    Description: 'STUN Server Address'
    Type: String
    Default: 'stun.wavelength.antmedia.cloud'
  DomainName:
    Description: 'Fill in this field if you selected EnableSSL true. The domain name that you will use in Ant Media Server.'
    Type: String
    Default: ''
  Route53HostedZoneId:
    Description: 'Fill in this field if you selected EnableSSL true. HostedZoneId of Domain Name on Route53'
    Type: String
    Default: ''
  EnableSSL: 
    Description: 'If you want to enable SSL for Ant Media Server, select True and fill in the "DomainName, Route53HostedZoneId" fields.'
    Default: false
    Type: String
    AllowedValues: 
      - true
      - false 
Conditions:
  Route53IAM: !Equals 
    - !Ref EnableSSL
    - true

Resources:
  DescribeImagesRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DescribeImages
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action: ec2:DescribeImages
                Effect: Allow
                Resource: "*"
  GetLatestAMI:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.6
      Handler: index.handler
      Role: !Sub ${DescribeImagesRole.Arn}
      Timeout: 60
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import json
          import traceback

          def handler(event, context):
            try:
              response = boto3.client('ec2').describe_images(
                  Owners=[event['ResourceProperties']['Owner']],
                  Filters=[
                    {'Name': 'name', 'Values': [event['ResourceProperties']['Name']]},
                    {'Name': 'architecture', 'Values': [event['ResourceProperties']['Architecture']]},
                    {'Name': 'root-device-type', 'Values': ['ebs']},
                  ],
              )

              amis = sorted(response['Images'],
                            key=lambda x: x['CreationDate'],
                            reverse=True)
              id = amis[0]['ImageId']

              cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, id)
            except:
              traceback.print_last()
              cfnresponse.send(event, context, cfnresponse.FAIL, {}, "ok")

  AntMediaAmi:
    Type: Custom::FindAMI
    Properties:
      ServiceToken: !Sub ${GetLatestAMI.Arn}
      Owner: "679593333241"
      Name: "AntMedia-AWS-Marketplace-EE-*"
      Architecture: "x86_64"

  UbuntuAmi:
    Type: Custom::FindAMI
    Properties:
      ServiceToken: !Sub ${GetLatestAMI.Arn}
      Owner: "099720109477"
      Name: "ubuntu/images/hvm-ssd/ubuntu-bionic-18.04-amd64-server-*"
      Architecture: "x86_64"

  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SSH access and HTTP access on the configured port
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '5080'
          ToPort: '5080'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '5443'
          ToPort: '5443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '1935'
          ToPort: '1935'
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: '5000'
          ToPort: '65000'
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VpcId
  AntMediaEC2Instance:
      Type: 'AWS::EC2::Instance'
      Properties:
        KeyName: !Ref KeyName
        ImageId: !Ref AntMediaAmi
        InstanceType: !Ref AntMediaServerInstanceType
        NetworkInterfaces:
          - AssociateCarrierIpAddress: true
        IamInstanceProfile: !If [Route53IAM, !Ref Route53Profile, !Ref "AWS::NoValue"]
        NetworkInterfaces:
          - SubnetId: !Select [ 0, !Ref Subnets ]
            AssociateCarrierIpAddress: true
            DeviceIndex: '0'
            GroupSet:
              - Ref: InstanceSecurityGroup
        Tags:
        - Key: Name
          Value: AntmediaServer
        UserData:
         Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            apt-get update && apt-get install awscli -y           
            echo "settings.webrtc.stunServerURI=stun:${STUNServerAddress}" >> /usr/local/antmedia/webapps/WebRTCAppEE/WEB-INF/red5-web.properties
            sed -i "s/'urls' : 'stun:.*/'urls' : 'stun:${STUNServerAddress}'/g" /usr/local/antmedia/webapps/WebRTCAppEE/*.html
            if [ ${EnableSSL} == "true" ]; then
              cat << EOF > /tmp/aws_route53.json
              {
              "Comment": "CREATE/DELETE/UPSERT a record ",
              "Changes": [{
              "Action": "CREATE",
                          "ResourceRecordSet": {
                                      "Name":"${DomainName}",
                                      "Type": "A",
                                      "TTL": 300,
                                      "ResourceRecords": [{ "Value":"$(curl -s http://checkip.amazonaws.com)"}]
              }}]}
            EOF
              aws route53 change-resource-record-sets --hosted-zone-id ${Route53HostedZoneId} --change-batch file:///tmp/aws_route53.json
              /usr/local/antmedia/enable_ssl.sh -d ${DomainName} -v route53
            fi


  Route53Profile:
    Condition: Route53IAM
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: Route53Role
  Route53Policy:
    Condition: Route53IAM
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: Route53Policy
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action:
          - route53:*
          - route53domains:*
          Resource: "*"
        - Effect: Allow
          Action: apigateway:GET
          Resource: arn:aws:apigateway:*::/domainnames
      Roles:
      - Ref: Route53Role
  Route53Role:
    Condition: Route53IAM
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
